{"name":"Django-stronghold","tagline":"Get inside your stronghold and make all your Django views default login_required","body":"![travis](https://travis-ci.org/mgrouchy/django-stronghold.png?branch=master)\r\n\r\n#Stronghold\r\n\r\nGet inside your stronghold and make all your Django views default login_required\r\n\r\nStronghold is a very small and easy to use django app that makes all your Django project default to require login for all of your views.\r\n\r\nWARNING: still in development, so some of the DEFAULTS and such will be changing without notice.\r\n\r\n##Installation\r\n\r\nInstall via pip.\r\n\r\n```sh\r\npip install django-stronghold\r\n```\r\n\r\nAdd stronghold to your INSTALLED_APPS in your Django settings file\r\n\r\n```python\r\n\r\nINSTALLED_APPS = (\r\n    #...\r\n    'stronghold',\r\n)\r\n```\r\n\r\nThen add the stronghold middleware to your MIDDLEWARE_CLASSES in your Django settings file\r\n\r\n```python\r\nMIDDLEWARE_CLASSES = (\r\n    #...\r\n    'stronghold.middleware.LoginRequiredMiddleware',\r\n)\r\n\r\n```\r\n\r\n##Usage\r\n\r\nIf you followed the installation instructions now all your views are defaulting to require a login.\r\nTo make a view public again you can use the public decorator provided in `stronghold.decorators` like so:\r\n\r\n###For function based views\r\n```python\r\nfrom stronghold.decorators import public\r\n\r\n\r\n@public\r\ndef someview(request):\r\n\t# do some work\r\n\t#...\r\n\r\n```\r\n\r\n###for class based views\r\n\r\n```python\r\nfrom django.utils.decorators import method_decorator\r\nfrom stronghold.decorators import public\r\n\r\n\r\nclass SomeView(View):\r\n\tdef get(self, request, *args, **kwargs):\r\n\t\t# some view logic\r\n\t\t#...\r\n\r\n\t@method_decorator(public)\r\n\tdef dispatch(self, *args, **kwargs):\r\n    \treturn super(SomeView, self).dispatch(*args, **kwargs)\r\n```\r\n\r\n##Configuration (optional)\r\n\r\n\r\n###STRONGHOLD_DEFAULTS\r\n\r\nUse Strongholds defaults in addition to your own settings.\r\n\r\n**Default**:\r\n\r\n```python\r\nSTRONGHOLD_DEFAULTS = True\r\n```\r\n\r\nYou can add a tuple of url regexes in your settings file with the\r\n`STRONGHOLD_PUBLIC_URLS` setting. Any url that matches against these patterns\r\n will be made public without using the `@public` decorator.\r\n\r\n\r\n###STRONGHOLD_PUBLIC_URLS\r\n\r\n**Default**:\r\n```python\r\nSTRONGHOLD_PUBLIC_URLS = ()\r\n```\r\n\r\nIf STRONGHOLD_DEFAULTS is True STRONGHOLD_PUBLIC_URLS contains:\r\n```python\r\n(\r\n    r'^%s.+$' % settings.STATIC_URL,\r\n    r'^%s.+$' % settings.MEDIA_URL,\r\n)\r\n\r\n```\r\nWhen settings.DEBUG = True. This is additive to your settings to support serving\r\nStatic files and media files from the development server. It does not replace any\r\nsettings you may have in `STRONGHOLD_PUBLIC_URLS`.\r\n\r\n> Note: Public URL regexes are matched against `[HttpRequest.path_info](https://docs.djangoproject.com/en/dev/ref/request-response/#django.http.HttpRequest.path_info)`\r\n\r\n###STRONGHOLD_NAMED_URLS\r\nYou can add a tuple of url names in your settings file with the\r\n`STRONGHOLD_NAMED_URLS` setting. Names in this setting will be reversed using\r\n`django.core.urlresolvers.reverse` and any url matching the output of the reverse\r\ncall will be made public without using the `@public` decorator:\r\n\r\n**Default**:\r\n```python\r\nSTRONGHOLD_NAMED_URLS = ()\r\n```\r\n\r\nIf STRONGHOLD_DEFAULTS is True additionally we search for `django.contrib.auth`\r\nif it exists, we add the login and logout view names to `STRONGHOLD_NAMED_URLS`\r\n\r\n##Compatiblity\r\n\r\nTest with:\r\n* Django 1.4.x\r\n* Django 1.5\r\n\r\n##Contribute\r\n\r\nSee CONTRIBUTING.md\r\n","google":"UA-1990784-1","note":"Don't delete this file! It's used internally to help with page regeneration."}